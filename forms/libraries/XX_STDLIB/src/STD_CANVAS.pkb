CREATE OR REPLACE PACKAGE BODY STD_CANVAS IS
	
  /*
   * STDLIB for Oracle Forms 10g
   * Copyright (c) 2017, Pawe≈Ç Kierzkowski
   * License: MIT
   */

  ------------------------------------------------------------------------------
  -- Private API declarations
  ------------------------------------------------------------------------------

  FUNCTION GET_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER) RETURN VARCHAR2;
  
  PROCEDURE SET_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER, P_VALUE IN VARCHAR2);

  FUNCTION GET_NUMBER_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER) RETURN NUMBER;
  
  PROCEDURE SET_NUMBER_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER, P_VALUE IN NUMBER);

  FUNCTION GET_BOOLEAN_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER) RETURN BOOLEAN;
  
  PROCEDURE SET_BOOLEAN_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER, P_STATE IN BOOLEAN);

  PROCEDURE GET_VALID_CANVAS_HANDLE(
    P_PROC_NAME IN VARCHAR2 DEFAULT 'STD_CANVAS.GET_VALID_CANVAS_HANDLE',
    P_CANVAS_NAME IN STD_TYPE.CANVAS_NAME,
    X_HANDLE OUT STD_TYPE.CANVAS_HANDLE
  );
  

  ------------------------------------------------------------------------------
  -- Public API
  ------------------------------------------------------------------------------

  FUNCTION NEW(P_CANVAS_NAME IN STD_TYPE.CANVAS_NAME) RETURN STD_CANVAS
  IS
    L_CANVAS STD_CANVAS;
  BEGIN
    STD_TYPE.VALIDATE('STD_CANVAS.NEW', 'P_CANVAS_NAME', P_CANVAS_NAME, STD_TYPE.ARG_TYPE.CANVAS_NAME);
    
    GET_VALID_CANVAS_HANDLE('STD_CANVAS.NEW', P_CANVAS_NAME, L_CANVAS.HANDLE);

    L_CANVAS.NAME := P_CANVAS_NAME;

    RETURN L_CANVAS;
  END NEW;

  
  FUNCTION IS_NULL(P_CANVAS IN STD_CANVAS) RETURN BOOLEAN
  IS
  BEGIN
    RETURN P_CANVAS.NAME = '_NULL_CANVAS_'
      OR ID_NULL(P_CANVAS.HANDLE);
  END IS_NULL;


  FUNCTION EQUALS(P_CANVAS_1 IN STD_CANVAS, P_CANVAS_2 IN STD_CANVAS) RETURN BOOLEAN
  IS
  BEGIN
    RETURN
      -- NOT IS_NULL(P_CANVAS_1)
      -- AND NOT IS_NULL(P_CANVAS_2)
      -- AND 
      P_CANVAS_1.NAME = P_CANVAS_2.NAME;
  END EQUALS;


  PROCEDURE SHOW(P_CANVAS IN STD_CANVAS)
  IS
  BEGIN
    SHOW_VIEW(P_CANVAS.NAME);
  END SHOW;


  PROCEDURE HIDE(P_CANVAS IN STD_CANVAS)
  IS
  BEGIN
    HIDE_VIEW(P_CANVAS.NAME);
  END HIDE;


  FUNCTION HEIGHT(P_CANVAS IN STD_CANVAS) RETURN NUMBER
  IS
  BEGIN
    RETURN GET_HEIGHT(P_CANVAS);
  END HEIGHT;


  FUNCTION GET_HEIGHT(P_CANVAS IN STD_CANVAS) RETURN NUMBER
  IS
  BEGIN
    RETURN GET_NUMBER_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.HEIGHT);
  END GET_HEIGHT;


  PROCEDURE SET_HEIGHT(P_CANVAS IN STD_CANVAS, P_HEIGHT IN NUMBER)
  IS
  BEGIN
    SET_NUMBER_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.HEIGHT, P_HEIGHT);
  END SET_HEIGHT;


  FUNCTION TOPMOST_TAB_PAGE(P_CANVAS IN STD_CANVAS) RETURN STD_TAB_PAGE.STD_TAB_PAGE
  IS
  BEGIN
    RETURN GET_TOPMOST_TAB_PAGE(P_CANVAS);
  END TOPMOST_TAB_PAGE;


  FUNCTION GET_TOPMOST_TAB_PAGE(P_CANVAS IN STD_CANVAS) RETURN STD_TAB_PAGE.STD_TAB_PAGE
  IS
  BEGIN
    RETURN STD_TAB_PAGE.NEW(GET_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.TOPMOST_TAB_PAGE));
  END GET_TOPMOST_TAB_PAGE;


  PROCEDURE SET_TOPMOST_TAB_PAGE(P_CANVAS IN STD_CANVAS, P_TAB_PAGE IN STD_TAB_PAGE.STD_TAB_PAGE)
  IS
  BEGIN
    SET_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.TOPMOST_TAB_PAGE, P_TAB_PAGE.NAME);
  END SET_TOPMOST_TAB_PAGE;


  -- FUNCTION WIDTH(P_CANVAS IN STD_CANVAS) RETURN NUMBER
  -- IS
  -- BEGIN
  --   RETURN GET_WIDTH(P_CANVAS);
  -- END WIDTH;


  FUNCTION GET_WIDTH(P_CANVAS IN STD_CANVAS) RETURN NUMBER
  IS
  BEGIN
    RETURN GET_NUMBER_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.WIDTH);
  END GET_WIDTH;


  PROCEDURE SET_WIDTH(P_CANVAS IN STD_CANVAS, P_WIDTH IN NUMBER)
  IS
  BEGIN
    SET_NUMBER_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.WIDTH, P_WIDTH);
  END SET_WIDTH;


  FUNCTION VISUAL_ATTRIBUTE(P_CANVAS IN STD_CANVAS) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_VISUAL_ATTRIBUTE(P_CANVAS);
  END VISUAL_ATTRIBUTE;


  FUNCTION GET_VISUAL_ATTRIBUTE(P_CANVAS IN STD_CANVAS) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.VISUAL_ATTRIBUTE);
  END GET_VISUAL_ATTRIBUTE;


  PROCEDURE SET_VISUAL_ATTRIBUTE(P_CANVAS IN STD_CANVAS, P_VISUAL_ATTRIBUTE_NAME IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_CANVAS, STD_CANVAS_PROPS.VISUAL_ATTRIBUTE, P_VISUAL_ATTRIBUTE_NAME);
  END SET_VISUAL_ATTRIBUTE;


  ------------------------------------------------------------------------------
  -- Private API
  ------------------------------------------------------------------------------
  
  FUNCTION GET_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_CANVAS_PROPERTY(P_CANVAS.HANDLE, P_PROPERTY);
  END GET_PROPERTY;
  
  
  PROCEDURE SET_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER, P_VALUE IN VARCHAR2)
  IS
  BEGIN
    SET_CANVAS_PROPERTY(P_CANVAS.HANDLE, P_PROPERTY, P_VALUE);
  END SET_PROPERTY;
  

  FUNCTION GET_NUMBER_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER) RETURN NUMBER
  IS
  BEGIN
    RETURN TO_NUMBER(GET_PROPERTY(P_CANVAS, P_PROPERTY));
  END GET_NUMBER_PROPERTY;
  

  PROCEDURE SET_NUMBER_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER, P_VALUE IN NUMBER)
  IS
  BEGIN
    SET_CANVAS_PROPERTY(P_CANVAS.HANDLE, P_PROPERTY, TO_NUMBER(P_VALUE));
  END SET_NUMBER_PROPERTY;


  FUNCTION GET_BOOLEAN_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER) RETURN BOOLEAN
  IS
  BEGIN
    RETURN GET_PROPERTY(P_CANVAS, P_PROPERTY) = 'TRUE';
  END GET_BOOLEAN_PROPERTY;


  PROCEDURE SET_BOOLEAN_PROPERTY(P_CANVAS IN STD_CANVAS, P_PROPERTY IN NUMBER, P_STATE IN BOOLEAN)
  IS
    L_STATE NUMBER;
  BEGIN
    IF P_STATE THEN
      L_STATE := PROPERTY_TRUE;
    ELSE
      L_STATE := PROPERTY_FALSE;
    END IF;

    SET_CANVAS_PROPERTY(P_CANVAS.HANDLE, P_PROPERTY, L_STATE);
  END SET_BOOLEAN_PROPERTY;


  PROCEDURE GET_VALID_CANVAS_HANDLE(
    P_PROC_NAME IN VARCHAR2 DEFAULT 'STD_CANVAS.GET_VALID_CANVAS_HANDLE',
    P_CANVAS_NAME IN STD_TYPE.CANVAS_NAME,
    X_HANDLE OUT STD_TYPE.CANVAS_HANDLE
  )
  IS
    L_HANDLE STD_TYPE.CANVAS_HANDLE;
  BEGIN
    L_HANDLE := FIND_CANVAS(P_CANVAS_NAME);
    
    IF ID_NULL(L_HANDLE) THEN
      FND_MESSAGE.SET_STRING(P_PROC_NAME || ': Unable to find CANVAS ''' || P_CANVAS_NAME || '''');
      APP_EXCEPTION.RAISE_EXCEPTION;
    END IF;

    X_HANDLE := L_HANDLE;
  END GET_VALID_CANVAS_HANDLE;
  

END STD_CANVAS;