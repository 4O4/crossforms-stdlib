CREATE OR REPLACE PACKAGE BODY STD_VIEWPORT IS
	
  /*
   * STDLIB for Oracle Forms 10g
   * Copyright (c) 2017, Pawe≈Ç Kierzkowski
   * License: MIT
   */

  ------------------------------------------------------------------------------
  -- Private API declarations
  ------------------------------------------------------------------------------

  FUNCTION GET_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER) RETURN VARCHAR2;
  
  PROCEDURE SET_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER, P_VALUE IN VARCHAR2);

  FUNCTION GET_NUMBER_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER) RETURN NUMBER;
  
  PROCEDURE SET_NUMBER_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER, P_VALUE IN NUMBER);

  FUNCTION GET_BOOLEAN_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER) RETURN BOOLEAN;
  
  PROCEDURE SET_BOOLEAN_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER, P_STATE IN BOOLEAN);

  PROCEDURE GET_VALID_VIEWPORT_HANDLE(
    P_PROC_NAME IN VARCHAR2 DEFAULT 'STD_VIEWPORT.GET_VALID_VIEWPORT_HANDLE',
    P_VIEWPORT_NAME IN STD_TYPE.VIEWPORT_NAME,
    X_HANDLE OUT STD_TYPE.VIEWPORT_HANDLE
  );
  

  ------------------------------------------------------------------------------
  -- Public API
  ------------------------------------------------------------------------------

  FUNCTION NEW(P_VIEWPORT_NAME IN STD_TYPE.VIEWPORT_NAME) RETURN STD_VIEWPORT
  IS
    L_VIEWPORT STD_VIEWPORT;
  BEGIN
    STD_TYPE.VALIDATE('STD_VIEWPORT.NEW', 'P_VIEWPORT_NAME', P_VIEWPORT_NAME, STD_TYPE.ARG_TYPE.VIEWPORT_NAME);
    
    IF P_VIEWPORT_NAME IS NOT NULL THEN
      GET_VALID_VIEWPORT_HANDLE('STD_VIEWPORT.NEW', P_VIEWPORT_NAME, L_VIEWPORT.HANDLE);

      L_VIEWPORT.NAME := P_VIEWPORT_NAME;
      L_VIEWPORT.WINDOW := STD_WINDOW.NEW(GET_PROPERTY(L_VIEWPORT, STD_VIEWPORT_PROPS.WINDOW_NAME));
    END IF;

    RETURN L_VIEWPORT;
  END NEW;

  
  FUNCTION IS_NULL(P_VIEWPORT IN STD_VIEWPORT) RETURN BOOLEAN
  IS
  BEGIN
    RETURN P_VIEWPORT.NAME = '_NULL_VIEWPORT_'
      OR ID_NULL(P_VIEWPORT.HANDLE);
  END IS_NULL;


  FUNCTION EQUALS(P_VIEWPORT_1 IN STD_VIEWPORT, P_VIEWPORT_2 IN STD_VIEWPORT) RETURN BOOLEAN
  IS
  BEGIN
    RETURN P_VIEWPORT_1.NAME = P_VIEWPORT_2.NAME;
  END EQUALS;


  PROCEDURE SHOW(P_VIEWPORT IN STD_VIEWPORT)
  IS
  BEGIN
    SHOW_VIEW(P_VIEWPORT.HANDLE);
  END SHOW;


  PROCEDURE HIDE(P_VIEWPORT IN STD_VIEWPORT)
  IS
  BEGIN
    HIDE_VIEW(P_VIEWPORT.HANDLE);
  END HIDE;


  FUNCTION VISIBLE(P_VIEWPORT IN STD_VIEWPORT) RETURN BOOLEAN
  IS
  BEGIN
    RETURN GET_VISIBLE(P_VIEWPORT);
  END VISIBLE;


  FUNCTION GET_VISIBLE(P_VIEWPORT IN STD_VIEWPORT) RETURN BOOLEAN
  IS
  BEGIN
    RETURN GET_BOOLEAN_PROPERTY(P_VIEWPORT, STD_VIEWPORT_PROPS.VISIBLE);
  END GET_VISIBLE;

  
  PROCEDURE SET_VISIBLE(P_VIEWPORT IN STD_VIEWPORT, P_VISIBLE IN BOOLEAN)
  IS
  BEGIN
    SET_BOOLEAN_PROPERTY(P_VIEWPORT, STD_VIEWPORT_PROPS.VISIBLE, P_VISIBLE);
  END SET_VISIBLE;


  ------------------------------------------------------------------------------
  -- Private API
  ------------------------------------------------------------------------------
  
  FUNCTION GET_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_VIEW_PROPERTY(P_VIEWPORT.HANDLE, P_PROPERTY);
  END GET_PROPERTY;
  
  
  PROCEDURE SET_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER, P_VALUE IN VARCHAR2)
  IS
  BEGIN
    SET_VIEW_PROPERTY(P_VIEWPORT.HANDLE, P_PROPERTY, P_VALUE);
  END SET_PROPERTY;
  

  FUNCTION GET_NUMBER_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER) RETURN NUMBER
  IS
  BEGIN
    RETURN TO_NUMBER(GET_PROPERTY(P_VIEWPORT, P_PROPERTY));
  END GET_NUMBER_PROPERTY;
  

  PROCEDURE SET_NUMBER_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER, P_VALUE IN NUMBER)
  IS
  BEGIN
    SET_VIEW_PROPERTY(P_VIEWPORT.HANDLE, P_PROPERTY, TO_NUMBER(P_VALUE));
  END SET_NUMBER_PROPERTY;


  FUNCTION GET_BOOLEAN_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER) RETURN BOOLEAN
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VIEWPORT, P_PROPERTY) = 'TRUE';
  END GET_BOOLEAN_PROPERTY;


  PROCEDURE SET_BOOLEAN_PROPERTY(P_VIEWPORT IN STD_VIEWPORT, P_PROPERTY IN NUMBER, P_STATE IN BOOLEAN)
  IS
    L_STATE NUMBER;
  BEGIN
    IF P_STATE THEN
      L_STATE := PROPERTY_TRUE;
    ELSE
      L_STATE := PROPERTY_FALSE;
    END IF;

    SET_VIEW_PROPERTY(P_VIEWPORT.HANDLE, P_PROPERTY, L_STATE);
  END SET_BOOLEAN_PROPERTY;


  PROCEDURE GET_VALID_VIEWPORT_HANDLE(
    P_PROC_NAME IN VARCHAR2 DEFAULT 'STD_VIEWPORT.GET_VALID_VIEWPORT_HANDLE',
    P_VIEWPORT_NAME IN STD_TYPE.VIEWPORT_NAME,
    X_HANDLE OUT STD_TYPE.VIEWPORT_HANDLE
  )
  IS
    L_HANDLE STD_TYPE.VIEWPORT_HANDLE;
  BEGIN
    L_HANDLE := FIND_VIEW(P_VIEWPORT_NAME);
    
    IF ID_NULL(L_HANDLE) THEN
      FND_MESSAGE.SET_STRING(P_PROC_NAME || ': Unable to find VIEWPORT ''' || P_VIEWPORT_NAME || '''');
      APP_EXCEPTION.RAISE_EXCEPTION;
    END IF;

    X_HANDLE := L_HANDLE;
  END GET_VALID_VIEWPORT_HANDLE;
  

END STD_VIEWPORT;