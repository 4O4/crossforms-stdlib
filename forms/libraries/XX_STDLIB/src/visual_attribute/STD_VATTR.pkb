CREATE OR REPLACE PACKAGE BODY STD_VATTR IS
	
  /*
   * STDLIB for Oracle Forms 10g
   * Copyright (c) 2017, Pawe≈Ç Kierzkowski
   * License: MIT
   */

  ------------------------------------------------------------------------------
  -- Private API declarations
  ------------------------------------------------------------------------------

  FUNCTION GET_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER) RETURN VARCHAR2;
  
  PROCEDURE SET_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER, P_VALUE IN VARCHAR2);

  FUNCTION GET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER) RETURN NUMBER;
  
  PROCEDURE SET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER, P_VALUE IN NUMBER);

  FUNCTION GET_BOOLEAN_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER) RETURN BOOLEAN;
  
  PROCEDURE SET_BOOLEAN_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER, P_STATE IN BOOLEAN);

  PROCEDURE GET_VALID_VATTR_HANDLE(
    P_PROC_NAME IN VARCHAR2 DEFAULT 'STD_VATTR.GET_VALID_VATTR_HANDLE',
    P_VISUAL_ATTRIBUTE_NAME IN STD_TYPE.VATTR_NAME,
    X_HANDLE OUT STD_TYPE.VATTR_HANDLE
  );
  

  ------------------------------------------------------------------------------
  -- Public API
  ------------------------------------------------------------------------------

  FUNCTION NEW(P_VISUAL_ATTRIBUTE_NAME IN STD_TYPE.VATTR_NAME) RETURN STD_VATTR
  IS
    L_VATTR STD_VATTR;
  BEGIN
    STD_TYPE.VALIDATE('STD_VATTR.NEW', 'P_VISUAL_ATTRIBUTE_NAME', P_VISUAL_ATTRIBUTE_NAME, STD_TYPE.ARG_TYPE.VATTR_NAME);
    
    GET_VALID_VATTR_HANDLE('STD_VATTR.NEW', P_VISUAL_ATTRIBUTE_NAME, L_VATTR.HANDLE);

    L_VATTR.NAME := UPPER(P_VISUAL_ATTRIBUTE_NAME);

    RETURN L_VATTR;
  END NEW;

  
  FUNCTION IS_NULL(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN BOOLEAN
  IS
  BEGIN
    RETURN P_VISUAL_ATTRIBUTE.NAME = '_NULL_VATTR_'
      OR ID_NULL(P_VISUAL_ATTRIBUTE.HANDLE);
  END IS_NULL;


  FUNCTION EQUALS(P_VISUAL_ATTRIBUTE_1 IN STD_VATTR, P_VISUAL_ATTRIBUTE_2 IN STD_VATTR) RETURN BOOLEAN
  IS
  BEGIN
    RETURN
      -- NOT IS_NULL(P_VISUAL_ATTRIBUTE_1)
      -- AND NOT IS_NULL(P_VISUAL_ATTRIBUTE_2)
      -- AND 
      P_VISUAL_ATTRIBUTE_1.NAME = P_VISUAL_ATTRIBUTE_2.NAME;
  END EQUALS;

  
  FUNCTION BACKGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_BACKGROUND_COLOR(P_VISUAL_ATTRIBUTE);
  END BACKGROUND_COLOR;


  FUNCTION GET_BACKGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.BACKGROUND_COLOR);
  END GET_BACKGROUND_COLOR;


  PROCEDURE SET_BACKGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_COLOR IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.BACKGROUND_COLOR, P_COLOR);
  END SET_BACKGROUND_COLOR;


  PROCEDURE RESET_BACKGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.BACKGROUND_COLOR, NULL);
  END RESET_BACKGROUND_COLOR;


  FUNCTION FILL_PATTERN(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_FILL_PATTERN(P_VISUAL_ATTRIBUTE);
  END FILL_PATTERN;


  FUNCTION GET_FILL_PATTERN(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FILL_PATTERN);
  END GET_FILL_PATTERN;


  PROCEDURE SET_FILL_PATTERN(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PATTERN_NAME IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FILL_PATTERN, P_PATTERN_NAME);
  END SET_FILL_PATTERN;


  PROCEDURE RESET_FILL_PATTERN(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FILL_PATTERN, NULL);
  END RESET_FILL_PATTERN;


  FUNCTION FONT_NAME(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_FONT_NAME(P_VISUAL_ATTRIBUTE);
  END FONT_NAME;


  FUNCTION GET_FONT_NAME(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_NAME);
  END GET_FONT_NAME;


  PROCEDURE SET_FONT_NAME(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_FONT_NAME IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_NAME, P_FONT_NAME);
  END SET_FONT_NAME;


  PROCEDURE RESET_FONT_NAME(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_NAME, NULL);
  END RESET_FONT_NAME;


  FUNCTION FONT_SIZE(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN NUMBER
  IS
  BEGIN
    RETURN GET_FONT_SIZE(P_VISUAL_ATTRIBUTE);
  END FONT_SIZE;


  FUNCTION GET_FONT_SIZE(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN NUMBER
  IS
  BEGIN
    RETURN GET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_SIZE);
  END GET_FONT_SIZE;


  PROCEDURE SET_FONT_SIZE(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_SIZE IN NUMBER)
  IS
  BEGIN
    SET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_SIZE, P_SIZE);
  END SET_FONT_SIZE;


  PROCEDURE RESET_FONT_SIZE(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_SIZE, NULL);
  END RESET_FONT_SIZE;


  FUNCTION FONT_SPACING(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_FONT_SPACING(P_VISUAL_ATTRIBUTE);
  END FONT_SPACING;


  FUNCTION GET_FONT_SPACING(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_SPACING);
  END GET_FONT_SPACING;


  PROCEDURE SET_FONT_SPACING(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_SPACING IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_SPACING, P_SPACING);
  END SET_FONT_SPACING;


  PROCEDURE RESET_FONT_SPACING(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_SPACING, NULL);
  END RESET_FONT_SPACING;


  FUNCTION FONT_STYLE(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_FONT_STYLE(P_VISUAL_ATTRIBUTE);
  END FONT_STYLE;


  FUNCTION GET_FONT_STYLE(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_STYLE);
  END GET_FONT_STYLE;


  PROCEDURE SET_FONT_STYLE(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_STYLE IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_STYLE, P_STYLE);
  END SET_FONT_STYLE;


  PROCEDURE RESET_FONT_STYLE(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_STYLE, NULL);
  END RESET_FONT_STYLE;


  FUNCTION FONT_WEIGHT(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_FONT_WEIGHT(P_VISUAL_ATTRIBUTE);
  END FONT_WEIGHT;


  FUNCTION GET_FONT_WEIGHT(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_WEIGHT);
  END GET_FONT_WEIGHT;


  PROCEDURE SET_FONT_WEIGHT(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_WEIGHT IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_WEIGHT, P_WEIGHT);
  END SET_FONT_WEIGHT;


  PROCEDURE RESET_FONT_WEIGHT(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FONT_WEIGHT, NULL);
  END RESET_FONT_WEIGHT;


  FUNCTION FOREGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_FOREGROUND_COLOR(P_VISUAL_ATTRIBUTE);
  END FOREGROUND_COLOR;


  FUNCTION GET_FOREGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FOREGROUND_COLOR);
  END GET_FOREGROUND_COLOR;


  PROCEDURE SET_FOREGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_COLOR IN VARCHAR2)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FOREGROUND_COLOR, P_COLOR);
  END SET_FOREGROUND_COLOR;


  PROCEDURE RESET_FOREGROUND_COLOR(P_VISUAL_ATTRIBUTE IN STD_VATTR)
  IS
  BEGIN
    SET_PROPERTY(P_VISUAL_ATTRIBUTE, STD_VATTR_PROPS.FOREGROUND_COLOR, NULL);
  END RESET_FOREGROUND_COLOR;


  ------------------------------------------------------------------------------
  -- Private API
  ------------------------------------------------------------------------------
  
  FUNCTION GET_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER) RETURN VARCHAR2
  IS
  BEGIN
    RETURN GET_VA_PROPERTY(P_VISUAL_ATTRIBUTE.HANDLE, P_PROPERTY);
  END GET_PROPERTY;
  
  
  PROCEDURE SET_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER, P_VALUE IN VARCHAR2)
  IS
  BEGIN
    SET_VA_PROPERTY(P_VISUAL_ATTRIBUTE.HANDLE, P_PROPERTY, P_VALUE);
  END SET_PROPERTY;
  

  FUNCTION GET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER) RETURN NUMBER
  IS
  BEGIN
    RETURN TO_NUMBER(GET_PROPERTY(P_VISUAL_ATTRIBUTE, P_PROPERTY));
  END GET_NUMBER_PROPERTY;
  

  PROCEDURE SET_NUMBER_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER, P_VALUE IN NUMBER)
  IS
  BEGIN
    SET_VA_PROPERTY(P_VISUAL_ATTRIBUTE.HANDLE, P_PROPERTY, TO_NUMBER(P_VALUE));
  END SET_NUMBER_PROPERTY;


  FUNCTION GET_BOOLEAN_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER) RETURN BOOLEAN
  IS
  BEGIN
    RETURN GET_PROPERTY(P_VISUAL_ATTRIBUTE, P_PROPERTY) = 'TRUE';
  END GET_BOOLEAN_PROPERTY;


  PROCEDURE SET_BOOLEAN_PROPERTY(P_VISUAL_ATTRIBUTE IN STD_VATTR, P_PROPERTY IN NUMBER, P_STATE IN BOOLEAN)
  IS
    L_STATE NUMBER;
  BEGIN
    IF P_STATE THEN
      L_STATE := PROPERTY_TRUE;
    ELSE
      L_STATE := PROPERTY_FALSE;
    END IF;

    SET_VA_PROPERTY(P_VISUAL_ATTRIBUTE.HANDLE, P_PROPERTY, L_STATE);
  END SET_BOOLEAN_PROPERTY;


  PROCEDURE GET_VALID_VATTR_HANDLE(
    P_PROC_NAME IN VARCHAR2 DEFAULT 'STD_VATTR.GET_VALID_VATTR_HANDLE',
    P_VISUAL_ATTRIBUTE_NAME IN STD_TYPE.VATTR_NAME,
    X_HANDLE OUT STD_TYPE.VATTR_HANDLE
  )
  IS
    L_HANDLE STD_TYPE.VATTR_HANDLE;
  BEGIN
    L_HANDLE := FIND_VA(P_VISUAL_ATTRIBUTE_NAME);
    
    IF ID_NULL(L_HANDLE) THEN
      FND_MESSAGE.SET_STRING(P_PROC_NAME || ': Unable to find visual attribute ''' || P_VISUAL_ATTRIBUTE_NAME || '''');
      APP_EXCEPTION.RAISE_EXCEPTION;
    END IF;

    X_HANDLE := L_HANDLE;
  END GET_VALID_VATTR_HANDLE;
  

END STD_VATTR;